// Binary Lifting Template
// Source : 

#include <bits/stdc++.h>
using namespace std;

int n, l; // n = number of nodes, l = ceil(log2(n))
vector<vector<int>> adj;

// Binary Lifting
int timer;
vector<int> tin, tout;
vector<vector<int>> up;

// DFS preprocessing for tin/tout and up table
void dfs(int v, int p) {
    tin[v] = ++timer;
    up[v][0] = p;

    for (int i = 1; i <= l; ++i) {
        if (up[v][i - 1] != -1)
            up[v][i] = up[up[v][i - 1]][i - 1];
        else
            up[v][i] = -1; // no ancestor at this level
    }

    for (int u : adj[v]) {
        if (u != p)
            dfs(u, v);
    }

    tout[v] = ++timer;
}

// Check if u is ancestor of v
bool is_ancestor(int u, int v) {
    return tin[u] <= tin[v] && tout[u] >= tout[v];
}

// LCA of u and v
int lca(int u, int v) {
    if (is_ancestor(u, v)) return u;
    if (is_ancestor(v, u)) return v;
    for (int i = l; i >= 0; --i) {
        if (up[u][i] != -1 && !is_ancestor(up[u][i], v))
            u = up[u][i];
    }
    return up[u][0];
}

// Preprocess tree for binary lifting
void preprocess(int root = 0) {
    tin.assign(n, 0);
    tout.assign(n, 0);
    timer = 0;
    l = (n <= 1 ? 0 : (int)ceil(log2(n)));
    up.assign(n, vector<int>(l + 1, -1)); // -1 = no ancestor
    dfs(root, -1);
}

// Get k-th ancestor of node v
// Returns -1 if k-th ancestor does not exist
int kth_ancestor(int v, int k) {
    for (int i = 0; i <= l; ++i) {
        if (v == -1) break; // no ancestor exists
        if (k & (1 << i)) {
            v = up[v][i];
        }
    }
    return v; // -1 if ancestor doesn't exist
}
