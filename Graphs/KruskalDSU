//Kruskal Algorithm for MST

struct KruskalMST {
    struct Edge {
        int u, v, weight;
        bool operator<(const Edge &other) const {
            return weight < other.weight;
        }
    };

    int n;
    vector<int> parent, rank;
    vector<Edge> edges, result;
    int cost = 0;

    KruskalMST(int vertices) : n(vertices) {
        parent.resize(n);
        rank.resize(n);
        for (int i = 0; i < n; i++)
            make_set(i);
    }

    void make_set(int v) {
        parent[v] = v;
        rank[v] = 0;
    }

    int find_set(int v) {
        if (v == parent[v])
            return v;
        return parent[v] = find_set(parent[v]); // path compression
    }

    bool union_sets(int a, int b) {
        a = find_set(a);
        b = find_set(b);
        if (a != b) {
            if (rank[a] < rank[b])
                swap(a, b);
            parent[b] = a;
            if (rank[a] == rank[b])
                rank[a]++;
            return true;
        }
        return false;
    }

    void add_edge(int u, int v, int w) {
        edges.push_back({u, v, w});
    }

    void kruskal() {
        sort(edges.begin(), edges.end());
        cost = 0;
        result.clear();

        for (Edge e : edges) {
            if (union_sets(e.u, e.v)) {
                cost += e.weight;
                result.push_back(e);
            }
        }
    }

    void print_mst() {
        cout << "MST cost: " << cost << "\nEdges:\n";
        for (auto &e : result)
            cout << e.u << " - " << e.v << " : " << e.weight << "\n";
    }
};
