//DSU
//Source : https://github.com/rustyBot31/CP-Algorithms/blob/main/DataStructures/DSUBySize

// Union-Find (Disjoint Set Union) by Size
struct DSU {
    vector<int> parent, size;

    DSU(int n) {
        parent.resize(n);
        size.resize(n , 1);
        for (int i = 0; i < n; i++) parent[i] = i;
    }

    int find(int x) {
        if (parent[x] == x) return x;
        return parent[x] = find(parent[x]); // path compression
    }

    bool unite(int a, int b) {
        a = find(a);
        b = find(b);
        if (a == b) return false; // already in same set
        if (size[a] < size[b]) swap(a, b); // union by size
        parent[b] = a;
        size[a] += size[b];
        return true;
    }
};

