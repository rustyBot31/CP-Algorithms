//Sparse Table
//
struct SparseTable {
    int n, LOG;
    vector<vector<int>> st;

    // function for GCD
    static int func(int a, int b) {
        return std::gcd(a, b);
    }

    SparseTable(const vector<int>& arr) {
        n = arr.size();
        LOG = 32 - __builtin_clz(n); // ceil(log2(n))
        st.assign(LOG, vector<int>(n));

        // base case
        for (int i = 0; i < n; i++) st[0][i] = arr[i];

        // build
        for (int k = 1; k < LOG; k++) {
            for (int i = 0; i + (1 << k) <= n; i++) {
                st[k][i] = func(st[k-1][i], st[k-1][i + (1 << (k-1))]);
            }
        }
    }

    // query gcd on [l, r] (0-indexed)
    int query(int l, int r) const {
        int len = r - l + 1;
        int k = 31 - __builtin_clz(len);
        return func(st[k][l], st[k][r - (1 << k) + 1]);
    }
};
