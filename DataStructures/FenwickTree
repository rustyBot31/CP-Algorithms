//Fenwick Tree
//Source : 
struct Fenwick {
    int n;
    vector<ll> B1, B2;

    Fenwick(int n) {
        this->n = n;
        B1.assign(n + 1, 0);
        B2.assign(n + 1, 0);
    }

    // internal add to BIT
    void add(vector<ll>& bit, int idx, ll val) {
        for (; idx <= n; idx += idx & -idx) {
            bit[idx] += val;
        }
    }

    // internal sum from BIT
    ll sum(const vector<ll>& bit, int idx) {
        ll res = 0;
        for (; idx > 0; idx -= idx & -idx) {
            res += bit[idx];
        }
        return res;
    }

    // add val to range [l..r]
    void range_update(int l, int r, ll val) {
        add(B1, l, val);
        add(B1, r + 1, -val);
        add(B2, l, val * (l - 1));
        add(B2, r + 1, -val * r);
    }

    // add val to a single point idx
    void point_update(int idx, ll val) {
        range_update(idx, idx, val);
    }

    // prefix sum [1..idx]
    ll prefix_sum(int idx) {
        return sum(B1, idx) * idx - sum(B2, idx);
    }

    // range sum [l..r]
    ll range_query(int l, int r) {
        return prefix_sum(r) - prefix_sum(l - 1);
    }

    // get value at a single index
    ll point_query(int idx) {
        return range_query(idx, idx);
    }
};
